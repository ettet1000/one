// ease
// ----
//
// This is a collection of commom ease functions.
//
// They all have the same `Float -> Float` signature.
//
// For a reference, check: http://easings.net/.
//

// import Bezier from "bezier-easing";

const ease = {
  linear: t => t,
  reverse: t => 1 - t,
  hold: _ => 1,
  pow: (f, p) => t => Math.pow(f(t), p),
  mix: (a, b, r) => t => (1 - r) * a(t) + r * b(t),
  cross: (a, b) => (t => (1 - t) * a(t) + t * b(t)),
  reversed: f => t => 1 - f(1 - t),
  mirrored: f => t => t <= 0.5 ? f(2 * t) / 2 : (2 - f(2 * (1 - t))) / 2,
  abs: f => t => {
    const v = f(t);
    if (v < 0) return -v;
    if (v > 1) return 1 - v;
    return v;
  },

  bezier: (p1, p2) => t => 3 * t * (1 - t) * (1 - t) * p1 +
  3 * t * t * (1 - t) * p2 + t * t * t,

  interp: data => t => {
    if (t <= 0) return 0.0;
    if (t >= 1) return 1.0;
    const p = t * (data.length - 1);
    const i = Math.floor(p);
    const d = p - i;
    return data[i] + d * (data[i + 1] - data[i]);
  },
};
export default ease;

function makeStep(inc2, step5) {
  return steps => t => {
    if (t == 0) return 0;
    return Math.clamp((Math.floor(t * steps) + inc2) / (steps + step5), 0, 1);
  };
}

ease.stepNone = makeStep(0, -1);
ease.stepBoth = makeStep(1, 1);
ease.stepStart = makeStep(1, 0);
ease.stepEnd = makeStep(0, 0);

// CSS Ease functions.
// ease.Bezier = Bezier;
// ease.CSSeaseIn = Bezier(0.42, 0, 1, 1);
// ease.CSSeaseOut = Bezier(0, 0, 0.58, 1);
// ease.CSSeaseInOut = Bezier(0.42, 0, 0.58, 1);

// Exp approximations of CSS Ease functions.
ease.easeIn = t => t ** 1.66908;
ease.easeOut = ease.reversed(t => t ** 1.66908);
ease.easeInOut = ease.mirrored(t => t ** 1.92023);

ease.quadIn = t => t ** 2;
ease.quadOut = ease.reversed(ease.quadIn);
ease.quadInOut = ease.mirrored(ease.quadIn);

ease.cubicIn = t => t ** 3;
ease.cubicOut = ease.reversed(ease.cubicIn);
ease.cubicInOut = ease.mirrored(ease.cubicIn);

ease.quartIn = t => t ** 4;
ease.quartOut = ease.reversed(ease.quartIn);
ease.quartInOut = ease.mirrored(ease.quartIn);

ease.quintIn = t => t ** 5;
ease.quintOut = ease.reversed(ease.quintIn);
ease.quintInOut = ease.mirrored(ease.quintIn);

ease.polyIn = n => t => t ** n;
ease.polyOut = n => ease.reversed(ease.polyIn(n));
ease.polyInOut = n => ease.mirrored(ease.polyIn(n));

ease.sinIn = t => 1 - Math.cos(t * Math.PI / 2);
ease.sinOut = ease.reversed(ease.sinIn);
ease.sinInOut = ease.mirrored(ease.sinIn);

ease.expIn = t => 2 ** (10 * (t - 1));
ease.expOut = ease.reversed(ease.expIn);
ease.expInOut = ease.mirrored(ease.expIn);

ease.circIn = t => 1 - Math.sqrt(1 - t ** 2);
ease.circOut = ease.reversed(ease.circIn);
ease.circInOut = ease.mirrored(ease.circIn);

// default s = 1.70158;
ease.backIn = s => t => t * t * (s * (t - 1) + t);
ease.backOut = s => ease.reversed(ease.backIn(s));
ease.backInOut = s => ease.mirrored(ease.backIn(s));

const c4 = (2 * Math.PI) / 3;
ease.elasticIn = t => t <= 0 ? 0 : t >= 1 ? 1 :
  -Math.pow(2, 10 * t - 10) * Math.sin((t * 10 - 10.75) * c4);
// ease.elasticIn = t => Math.sin(13 * t * Math.PI / 2) * 2 ** (10 * (t - 1));
ease.elasticOut = ease.reversed(ease.elasticIn);
ease.elasticInOut = ease.mirrored(ease.elasticIn);

ease.bounceOut = t => {
  if (t < 1 / 2.75) return 7.5625 * (t ** 2);
  if (t < 2 / 2.75) return 7.5625 * ((t - 1.5 / 2.75) ** 2) + 0.75;
  if (t < 2.5 / 2.75) return 7.5625 * ((t - 2.25 / 2.75) ** 2) + 0.9375;
  return 7.5625 * ((t - 2.625 / 2.75) ** 2) + 0.984375;
};
ease.bounceIn = ease.reversed(ease.bounceOut);
ease.bounceInOut = ease.mirrored(ease.bounceIn);

// cubic-bezier(0.4, 0., 0.2, 1.0)
ease.fastOutSlowIn = ease.interp([0, 0.0001, 0.0002, 0.0005, 0.0009, 0.0014,
  0.002, 0.0028, 0.0037, 0.0047, 0.0058, 0.0071, 0.0086, 0.0102, 0.0119,
  0.0139, 0.016, 0.0182, 0.0207, 0.0233, 0.0262, 0.0292, 0.0324, 0.0359,
  0.0396, 0.0435, 0.0476, 0.052, 0.0567, 0.0616, 0.0668, 0.0722, 0.078,
  0.0841, 0.0904, 0.0971, 0.1041, 0.1115, 0.1192, 0.1273, 0.1357, 0.1444,
  0.1536, 0.1631, 0.1729, 0.1832, 0.1938, 0.2047, 0.216, 0.2276, 0.2396,
  0.2519, 0.2644, 0.2772, 0.2902, 0.3034, 0.3168, 0.3304, 0.344, 0.3577,
  0.3714, 0.3852, 0.3989, 0.4125, 0.4261, 0.4395, 0.4528, 0.466, 0.479,
  0.4918, 0.5044, 0.5168, 0.5289, 0.5408, 0.5525, 0.564, 0.5752, 0.5862,
  0.5969, 0.6074, 0.6177, 0.6277, 0.6375, 0.647, 0.6564, 0.6655, 0.6744,
  0.6831, 0.6915, 0.6998, 0.7079, 0.7158, 0.7235, 0.731, 0.7383, 0.7454,
  0.7524, 0.7592, 0.7659, 0.7724, 0.7787, 0.7849, 0.7909, 0.7968, 0.8026,
  0.8082, 0.8137, 0.8191, 0.8243, 0.8294, 0.8344, 0.8393, 0.844, 0.8487,
  0.8532, 0.8577, 0.862, 0.8662, 0.8704, 0.8744, 0.8783, 0.8822, 0.8859,
  0.8896, 0.8932, 0.8966, 0.9001, 0.9034, 0.9066, 0.9098, 0.9129, 0.9159,
  0.9189, 0.9217, 0.9245, 0.9273, 0.9299, 0.9325, 0.9351, 0.9375, 0.9399,
  0.9423, 0.9445, 0.9468, 0.9489, 0.951, 0.9531, 0.9551, 0.957, 0.9589,
  0.9607, 0.9625, 0.9642, 0.9659, 0.9676, 0.9691, 0.9707, 0.9722, 0.9736,
  0.975, 0.9763, 0.9776, 0.9789, 0.9801, 0.9813, 0.9824, 0.9835, 0.9846,
  0.9856, 0.9866, 0.9875, 0.9884, 0.9893, 0.9901, 0.9909, 0.9916, 0.9924,
  0.993, 0.9937, 0.9943, 0.9949, 0.9954, 0.9959, 0.9964, 0.9969, 0.9973,
  0.9977, 0.998, 0.9983, 0.9986, 0.9989, 0.9991, 0.9993, 0.9995, 0.9997,
  0.9998, 0.9999, 0.9999, 1, 1, 1]);

// cubic-bezier(0.3, 0, 0.8, 0.15) + cubic-bezier(0.05, 0.7, 0.1, 1.0)
// midpoint: 1/6 duration, 40% of value.
ease.fastOutExtraSlowIn = ease.interp([0, 0.0002, 0.0008, 0.0018, 0.0032,
  0.0051, 0.0073, 0.01, 0.0131, 0.0167, 0.0208, 0.0254, 0.0305, 0.0362, 0.0425,
  0.0493, 0.0569, 0.0651, 0.0741, 0.0839, 0.0946, 0.1062, 0.1189, 0.1327,
  0.1478, 0.1644, 0.1826, 0.2026, 0.2249, 0.2497, 0.2778, 0.3098, 0.347,
  0.3916, 0.4412, 0.4866, 0.5266, 0.5613, 0.5913, 0.6173, 0.64, 0.6601, 0.6781,
  0.6942, 0.7089, 0.7222, 0.7345, 0.7458, 0.7562, 0.766, 0.775, 0.7836, 0.7916,
  0.7991, 0.8062, 0.813, 0.8194, 0.8255, 0.8312, 0.8368, 0.842, 0.8471, 0.8519,
  0.8565, 0.8609, 0.8652, 0.8693, 0.8732, 0.877, 0.8806, 0.8842, 0.8875,
  0.8908, 0.894, 0.8971, 0.9, 0.9029, 0.9057, 0.9083, 0.911, 0.9135, 0.9159,
  0.9183, 0.9206, 0.9228, 0.925, 0.9271, 0.9292, 0.9312, 0.9331, 0.935, 0.9369,
  0.9386, 0.9404, 0.9421, 0.9437, 0.9453, 0.9469, 0.9484, 0.9499, 0.9513,
  0.9527, 0.9541, 0.9554, 0.9567, 0.958, 0.9593, 0.9605, 0.9616, 0.9628,
  0.9639, 0.965, 0.9661, 0.9671, 0.9681, 0.9691, 0.9701, 0.971, 0.9719, 0.9728,
  0.9737, 0.9745, 0.9754, 0.9762, 0.977, 0.9777, 0.9785, 0.9792, 0.9799,
  0.9806, 0.9813, 0.982, 0.9826, 0.9832, 0.9839, 0.9844, 0.985, 0.9856, 0.9861,
  0.9867, 0.9872, 0.9877, 0.9882, 0.9887, 0.9892, 0.9896, 0.99, 0.9905, 0.9909,
  0.9913, 0.9917, 0.9921, 0.9924, 0.9928, 0.9932, 0.9935, 0.9938, 0.9941,
  0.9944, 0.9947, 0.995, 0.9953, 0.9956, 0.9958, 0.9961, 0.9963, 0.9966,
  0.9968, 0.997, 0.9972, 0.9974, 0.9976, 0.9978, 0.9979, 0.9981, 0.9983,
  0.9984, 0.9986, 0.9987, 0.9988, 0.9989, 0.9991, 0.9992, 0.9993, 0.9994,
  0.9994, 0.9995, 0.9996, 0.9997, 0.9997, 0.9998, 0.9998, 0.9999, 0.9999,
  0.9999, 1, 1, 1, 1, 1, 1]);

// cubic-bezier(0.0, 0.0, 0.2, 1);
ease.linearOutSlowIn = ease.interp([0, 0.0223, 0.0426, 0.0616, 0.0797, 0.097,
  0.1137, 0.1299, 0.1455, 0.1607, 0.1754, 0.1898, 0.2038, 0.2174, 0.2308,
  0.2438, 0.2566, 0.269, 0.2813, 0.2933, 0.305, 0.3165, 0.3279, 0.339, 0.3499,
  0.3606, 0.3711, 0.3814, 0.3916, 0.4016, 0.4114, 0.4211, 0.4306, 0.44, 0.4492,
  0.4583, 0.4672, 0.4761, 0.4847, 0.4933, 0.5017, 0.51, 0.5181, 0.5262, 0.5341,
  0.5419, 0.5496, 0.5572, 0.5647, 0.5721, 0.5794, 0.5866, 0.5936, 0.6006,
  0.6075, 0.6143, 0.621, 0.6276, 0.6341, 0.6405, 0.6469, 0.6531, 0.6593,
  0.6654, 0.6714, 0.6773, 0.6832, 0.6889, 0.6946, 0.7002, 0.7058, 0.7112,
  0.7166, 0.7219, 0.7272, 0.7323, 0.7375, 0.7425, 0.7475, 0.7524, 0.7572,
  0.762, 0.7667, 0.7713, 0.7759, 0.7804, 0.7848, 0.7892, 0.7936, 0.7978,
  0.8021, 0.8062, 0.8103, 0.8143, 0.8183, 0.8223, 0.8261, 0.8299, 0.8337,
  0.8374, 0.8411, 0.8447, 0.8482, 0.8517, 0.8552, 0.8586, 0.8619, 0.8652,
  0.8684, 0.8716, 0.8748, 0.8779, 0.881, 0.884, 0.8869, 0.8898, 0.8927, 0.8955,
  0.8983, 0.901, 0.9037, 0.9064, 0.909, 0.9115, 0.914, 0.9165, 0.9189, 0.9213,
  0.9237, 0.926, 0.9282, 0.9305, 0.9326, 0.9348, 0.9369, 0.9389, 0.941, 0.943,
  0.9449, 0.9468, 0.9487, 0.9505, 0.9523, 0.9541, 0.9558, 0.9575, 0.9591,
  0.9607, 0.9623, 0.9638, 0.9653, 0.9668, 0.9682, 0.9696, 0.971, 0.9723,
  0.9736, 0.9749, 0.9761, 0.9773, 0.9785, 0.9796, 0.9807, 0.9818, 0.9828,
  0.9838, 0.9848, 0.9857, 0.9866, 0.9875, 0.9883, 0.9891, 0.9899, 0.9907,
  0.9914, 0.9921, 0.9927, 0.9934, 0.994, 0.9945, 0.9951, 0.9956, 0.9961,
  0.9965, 0.997, 0.9974, 0.9977, 0.9981, 0.9984, 0.9987, 0.9989, 0.9991,
  0.9993, 0.9995, 0.9997, 0.9998, 0.9999, 0.9999, 1, 1, 1]);

// cubic-bezier(0.4, 0.0, 1, 1);
ease.fastOutLinearIn = ease.interp([0, 0.0001, 0.0002, 0.0005, 0.0008, 0.0013,
  0.0018, 0.0025, 0.0032, 0.004, 0.0049, 0.0059, 0.007, 0.0082, 0.0094, 0.0107,
  0.0122, 0.0136, 0.0152, 0.0168, 0.0185, 0.0203, 0.0222, 0.0241, 0.0261,
  0.0282, 0.0303, 0.0325, 0.0348, 0.0371, 0.0395, 0.042, 0.0445, 0.0471, 0.0497,
  0.0524, 0.0552, 0.058, 0.0608, 0.0638, 0.0668, 0.0698, 0.0729, 0.076, 0.0792,
  0.0825, 0.0858, 0.0891, 0.0925, 0.096, 0.0995, 0.1031, 0.1067, 0.1103, 0.114,
  0.1177, 0.1215, 0.1254, 0.1292, 0.1332, 0.1371, 0.1411, 0.1452, 0.1493,
  0.1534, 0.1576, 0.1618, 0.1661, 0.1704, 0.1747, 0.1791, 0.1836, 0.188, 0.1925,
  0.1971, 0.2016, 0.2062, 0.2109, 0.2156, 0.2203, 0.2251, 0.2299, 0.2347,
  0.2396, 0.2445, 0.2494, 0.2544, 0.2594, 0.2645, 0.2695, 0.2746, 0.2798, 0.285,
  0.2902, 0.2954, 0.3007, 0.306, 0.3113, 0.3167, 0.3221, 0.3275, 0.333, 0.3385,
  0.344, 0.3496, 0.3552, 0.3608, 0.3664, 0.3721, 0.3778, 0.3835, 0.3893, 0.3951,
  0.4009, 0.4068, 0.4126, 0.4185, 0.4245, 0.4304, 0.4364, 0.4424, 0.4485,
  0.4546, 0.4606, 0.4668, 0.4729, 0.4791, 0.4853, 0.4915, 0.4978, 0.5041,
  0.5104, 0.5167, 0.5231, 0.5295, 0.5359, 0.5423, 0.5488, 0.5553, 0.5618,
  0.5684, 0.5749, 0.5815, 0.5881, 0.5948, 0.6015, 0.6082, 0.6149, 0.6216,
  0.6284, 0.6352, 0.642, 0.6488, 0.6557, 0.6626, 0.6695, 0.6765, 0.6834, 0.6904,
  0.6974, 0.7045, 0.7115, 0.7186, 0.7257, 0.7329, 0.74, 0.7472, 0.7545, 0.7617,
  0.769, 0.7762, 0.7836, 0.7909, 0.7983, 0.8057, 0.8131, 0.8205, 0.828, 0.8355,
  0.843, 0.8505, 0.8581, 0.8657, 0.8734, 0.881, 0.8887, 0.8964, 0.9042, 0.9119,
  0.9198, 0.9276, 0.9355, 0.9434, 0.9513, 0.9593, 0.9673, 0.9754, 0.9835,
  0.9917, 1, 1]);

// HOW TO BUILD DISCRETIZE BEZIERS

// function cubicBezier(p0, p1, p2, p3) {
//   return t => {
//     const ti = 1 - t;
//     return (ti * ti * ti * p0 +
//       3 * ti * ti * t * p1 +
//       3 * ti * t * t * p2 +
//       t * t * t * p3);
//   };
// }

// function cubicBezier2D(p0, p1, p2, p3) {
//   const cbx = cubicBezier(p0[0], p1[0], p2[0], p3[0]);
//   const cby = cubicBezier(p0[1], p1[1], p2[1], p3[1]);
//   return t => [cbx(t), cby(t)];
// }

// function cubicBezierCSS(a, b, c, d) {
//   return cubicBezier2D([0, 0], [a, b], [c, d], [1, 1]);
// }

// function discretize(func, samples = 200, precision = 10000) {
//   const data = new Array(samples);
//   const T = samples * precision / 10;
//   for (let i = 0; i <= T; ++i) {
//     const [x, y] = f(i / T);
//     const idx = Math.floor(x * (samples - 1));
//     if (!data[idx]) data[idx] = 1;
//     data[idx] = Math.round(precision * Math.min(data[idx], y))) / precision;
//   }
//   data[samples] = data[samples - 1];
//   return data;
// }
