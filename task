#!/bin/bash
set -euo pipefail
IFS=$'\n\t'

GAMES=(wow)

function one {
  export GAME="$1"
  echo "Building $GAME"
  rm -rf "www/${GAME}"
  mkdir "www/${GAME}"
  echo "import main from './src/${GAME}.js'; main();" | npx rollup -c rollup.mjs
  node process.mjs
  rm -f "www/${GAME}/bundle.js"
}

function rebuild {
  rm -rf www/
  mkdir www/
  build
}

function build {
  \cp page.html www/index.html
  \cp icon.png www/

  for g in ${GAMES[@]}; do
    if [ ! -d "www/$g" ]; then
      one "$g"
    else
      echo "Skipping $g"
    fi
  done
}

function sync {
  rsync -a --partial --progress www/ metaphora.co:one/
}

function bench {
  RULE="$1"
  echo $RULE
  npx browserslist "${RULE}"
  cat <<EOF > .babelrc
{
  "presets": [
    [
      "@babel/preset-env",
      {
        "targets": "${RULE}",
        "useBuiltIns": "usage",
        "corejs": {"version": "3.10", "proposals": true},
        "shippedProposals": true
      }
    ]
  ],
  "plugins": [
  ]
}
EOF
  echo "import main from './src/wow.js'; main();" | npx rollup -c rollup.mjs -o x
  SIZE=`stat -f%z x`
  PAYLOAD=7266
  COMP=`cat x | lzma -9 | base64 | wc -c`
  TOTAL=$((COMP + PAYLOAD))
  rm -f x
  echo "JS size ${SIZE}"
  echo "Bundle size ${TOTAL}"
  npx browserslist --coverage "${RULE}"
}

function help {
  echo "$0 <task> <args>"
  echo "Tasks:"
  compgen -A function | grep -v "^_" | cat -n
}

TIMEFORMAT="Task completed in %3lR"
time "${@:-help}"